service: cors-simulator
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
params:
  default:
    domainName: cors-simulator-${sls:stage}.tomgregory.com
    assetsS3BucketName: cors-simulator-${sls:stage}-assets
    websiteS3BucketName: cors-simulator-${sls:stage}-website
    apiAllowedOrigins: https://${param:domainName}
  prod:
    domainName: cors-simulator.tomgregory.com
    assetsS3BucketName: cors-simulator-assets
    websiteS3BucketName: cors-simulator-website
    apiAllowedOrigins: https://${param:domainName}
plugins:
  - serverless-s3-sync
  - serverless-certificate-creator
custom:
  s3Sync:
    - bucketName: ${param:assetsS3BucketName}
      localDir: assets/
    - bucketName: ${param:websiteS3BucketName}
      localDir: website/public
  customCertificate:
    certificateName: 'assets.${param:domainName}'
    hostedZoneIds: Z06426551JRM5G4EGPV2L
functions:
  getNoAllowOriginHeader:
    handler: functions/get/no-allow-origin-header.handler
    events:
      - httpApi:
          path: /get-no-allow-origin-header
          method: get
  getSuccess:
    handler: functions/get/success.handler
    events:
      - httpApi:
          path: /get-success
          method: get       
  getMisconfiguredOrigin:
    handler: functions/get/misconfigured-origin.handler
    events:
      - httpApi:
          path: /get-misconfigured-origin
          method: get               
  getSetCookie:
    handler: functions/get/set-cookie.handler
    events:
      - httpApi:
          path: /get-set-cookie
          method: get        
    environment:
      ALLOWED_ORIGINS: ${param:apiAllowedOrigins}
  getRequiresCookie:
    handler: functions/get/requires-cookie.handler
    events:
      - httpApi:
          path: /get-requires-cookie
          method: get          
    environment:
      ALLOWED_ORIGINS: ${param:apiAllowedOrigins}               
  postNoAllowOriginHeader:
    handler: functions/post/no-allow-origin-header.handler
    events:
      - httpApi:
          path: /post-no-allow-origin-header
          method: post
      - httpApi:
          path: /post-no-allow-origin-header
          method: options
  postNoOptionsApi:
    handler: functions/post/no-allow-origin-header.handler
    events:
      - httpApi:
          path: /post-no-options-api
          method: post        
  postSetCookie:
    handler: functions/post/set-cookie.handler
    events:
      - httpApi:
          path: /post-set-cookie
          method: post        
      - httpApi:
          path: /post-set-cookie
          method: options                
    environment:
      ALLOWED_ORIGINS: ${param:apiAllowedOrigins}
  postRequiresCookie:
    handler: functions/post/requires-cookie.handler
    events:
      - httpApi:
          path: /post-requires-cookie
          method: post          
      - httpApi:
          path: /post-requires-cookie
          method: options
    environment:
      ALLOWED_ORIGINS: ${param:apiAllowedOrigins}          
  postSuccess:
    handler: functions/post/success.handler
    events:
      - httpApi:
          path: /post-success
          method: post          
      - httpApi:
          path: /post-success
          method: options
resources:
  Description: Infrastructure for Interactive CORS Simulator
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:assetsS3BucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:websiteS3BucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Principal: '*'
              Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
    PublicAccessBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource: !Sub 'arn:aws:s3:::${Bucket}/*'
              Principal:
                Service: cloudfront.amazonaws.com
              Condition:
                StringEquals:
                  AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${AssetsCloudFrontDistribution}'
    ApiDomainName:
      Type: AWS::ApiGatewayV2::DomainName
      Properties:
        DomainName: 'api.${param:domainName}'
        DomainNameConfigurations:
          - CertificateArn: !Ref CORSSimulatorCertificate
    ApiMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      DependsOn: ApiDomainName
      Properties:
        DomainName: 'api.${param:domainName}'
        ApiId: !Ref HttpApi
        Stage: '$default'
    ApiRecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !ImportValue TomGregorySiteHostedZoneId
        RecordSets:
          - Name: 'api.${param:domainName}'
            Type: A
            AliasTarget:
              HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId
              DNSName: !GetAtt ApiDomainName.RegionalDomainName
    AssetsCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - Id: S3Origin
              DomainName: !GetAtt Bucket.RegionalDomainName
              OriginAccessControlId: !GetAtt OriginAccessControl.Id
              S3OriginConfig:
                OriginAccessIdentity: ''
          Aliases:
            - 'assets.${param:domainName}'
          ViewerCertificate:
            AcmCertificateArn: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
    WebsiteCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultRootObject: index.html
          Origins:
            - Id: S3Origin
              DomainName: !Select [1, !Split ["//", !GetAtt WebsiteBucket.WebsiteURL]]
              CustomOriginConfig:
                OriginProtocolPolicy: 'http-only'
          Aliases:
            - ${param:domainName}
          ViewerCertificate:
            AcmCertificateArn: !ImportValue TomGregoryCertificate
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
    OriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: !Sub '${AWS::StackName}-OriginAccessControl'
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
    AssetsCloudFrontDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !ImportValue TomGregorySiteHostedZoneId
        Name: 'assets.${param:domainName}'
        Type: A
        AliasTarget:
          DNSName: !GetAtt AssetsCloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # value as described in AWS docs
    WebsiteCloudFrontDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !ImportValue TomGregorySiteHostedZoneId
        Name: ${param:domainName}
        Type: A
        AliasTarget:
          DNSName: !GetAtt WebsiteCloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # value as described in AWS docs
    CORSSimulatorCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${param:domainName}
        SubjectAlternativeNames:
          - '*.${param:domainName}'
        ValidationMethod: DNS
        DomainValidationOptions:
          - DomainName: ${param:domainName}
            HostedZoneId: !ImportValue TomGregorySiteHostedZoneId